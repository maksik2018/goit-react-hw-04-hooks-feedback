{"version":3,"sources":["components/Statistics/Statistic.styled.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Text","styled","p","Statistics","good","neutral","bad","total","positivePercentage","MainTitle","h2","Section","title","children","Button","button","FeedbackOptions","options","onLeaveFeedback","buttonOptions","Object","keys","map","option","type","onClick","Title","NotificationMessage","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","onFeedback","event","currentTarget","dataset","action","setState","prevState","this","className","Notification","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAEaA,EAAOC,IAAOC,EAAV,4F,OCsBFC,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,qCACE,eAACR,EAAD,oBAAaI,KACb,eAACJ,EAAD,uBAAgBK,KAChB,eAACL,EAAD,mBAAYM,KACZ,eAACN,EAAD,qBAAcO,KACd,eAACP,EAAD,iCAA0BQ,EAA1B,YCROC,EAAYR,IAAOS,GAAV,+DCaPC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,gCACI,cAACJ,EAAD,UAAYG,IACXC,MCLIC,EAASb,IAAOc,OAAV,oLCwBJC,I,EAAAA,EAtBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC5BC,EAAgBC,OAAOC,KAAKJ,GAClC,OACE,8BACGE,EAAcG,KAAI,SAAAC,GAAM,OACvB,cAACT,EAAD,CAEEU,KAAK,SACL,cAAaD,EACbE,QAASP,EAJX,SAMGK,GALIA,SCRFG,EAAQzB,IAAOC,EAAV,4DCUHyB,EARa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACvB,cAACF,EAAD,UAAQE,KCwDEC,G,kNArDbC,MAAQ,CACN1B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPyB,mBAAqB,WACnB,MAA+B,EAAKD,MAEpC,OAFA,EAAQ1B,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzB0B,gCAAkC,WAChC,IAAQ5B,EAAS,EAAK0B,MAAd1B,KACFG,EAAQ,EAAKwB,qBACnB,OAAOE,KAAKC,MAAO9B,EAAOG,EAAS,M,EAGrC4B,WAAa,SAACC,GACZ,IAAMZ,EAAOY,EAAMC,cAAcC,QAAQC,OACzC,EAAKC,UAAS,SAACC,GAAD,sBACXjB,EAAOiB,EAAUjB,GAAQ,O,4CAI9B,WACE,MAA+BkB,KAAKZ,MAA5B1B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,eAAC,EAAD,CAASM,MAAM,wBAAf,UACE,cAAC,EAAD,CACEK,QAASyB,KAAKZ,MACdZ,gBAAiBwB,KAAKP,aAGxB,gCACE,oBAAIQ,UAAU,aAAd,wBACCvC,EAAO,GAAKC,GAAgBC,EAAM,EACjC,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmC,KAAKX,qBACZvB,mBAAoBkC,KAAKV,oCAG3B,cAACY,EAAD,CAAchB,QAAQ,gC,GA9ChBiB,cCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b4bf5bb2.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Text = styled.p`\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-left: 14px;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Text } from \"../Statistics/Statistic.styled\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n    <>\r\n      <Text>Good: {good}</Text>\r\n      <Text>Neutral: {neutral}</Text>\r\n      <Text>Bad: {bad}</Text>\r\n      <Text>Total: {total}</Text>\r\n      <Text>Positive feedback: {positivePercentage}% </Text>\r\n    </>\r\n    \r\n)\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n\r\n};\r\n\r\nexport default Statistics;","import styled from '@emotion/styled';\r\n\r\nexport const MainTitle = styled.h2`\r\ncolor: green;\r\nmargin-left: 14px;\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MainTitle } from \"./Section.styled\";\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        <MainTitle>{title}</MainTitle>\r\n        {children}\r\n    </div>\r\n)\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\n  padding: 12px;\r\n  margin-left: 14px;\r\n  margin-right: 4px;\r\n  cursor: pointer;\r\n  border-radius: 15%;\r\n  &:hover {\r\n    background-color: blue;\r\n  }\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from '../FeedbackOptions/FeedbackOptions.styled';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  const buttonOptions = Object.keys(options);\r\n  return (\r\n    <div>\r\n      {buttonOptions.map(option => (\r\n        <Button\r\n          key={option}\r\n          type=\"button\"\r\n          data-action={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.p`\r\ncolor:red;\r\nmargin-left: 14px;\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Title } from '../Notification/Notification.styled';\r\n\r\nconst NotificationMessage = ({ message }) => (\r\n     <Title>{message}</Title>\r\n);\r\n\r\nNotificationMessage.propTypes={\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default NotificationMessage;","import React, { Component } from \"react\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return Math.round((good / total) * 100);\n  };\n\n  onFeedback = (event) => {\n    const type = event.currentTarget.dataset.action;\n    this.setState((prevState) => ({\n      [type]: prevState[type] + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.onFeedback}\n        />\n\n        <div>\n          <h2 className=\"Statistics\">Statistics</h2>\n          {good > 0 || neutral || 0 || bad > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </div>\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}